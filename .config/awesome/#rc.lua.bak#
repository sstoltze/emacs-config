-- Standard awesome library
local gears = require("gears")
local awful = require("awful")
awful.rules = require("awful.rules")
require("awful.autofocus")
-- Widget and layout library
local wibox = require("wibox")
-- Theme handling library
local beautiful = require("beautiful")
-- Notification library
local naughty = require("naughty")
local menubar = require("menubar")
local vicious = require("vicious") -- Install awesome-extra

-- Load Debian menu entries
require("debian.menu")

-- {{{ Error handling
-- Check if awesome encountered an error during startup and fell back to
-- another config (This code will only ever execute for the fallback config)
if awesome.startup_errors then
    naughty.notify({ preset = naughty.config.presets.critical,
                     title = "Oops, there were errors during startup!",
                     text = awesome.startup_errors })
end

-- Handle runtime errors after startup
do
    local in_error = false
    awesome.connect_signal("debug::error", function (err)
        -- Make sure we don't go into an endless error loop
        if in_error then return end
        in_error = true

        naughty.notify({ preset = naughty.config.presets.critical,
                         title = "Oops, an error happened!",
                         text = err })
        in_error = false
    end)
end
-- }}}



-- {{{ Variable definitions
-- Themes define colours, icons, and wallpapers
--beautiful.init("/home/simon/.config/awesome/themes/default/theme.lua")
--beautiful.init("/usr/share/awesome/themes/zenburn/theme.lua")
--beautiful.init("/home/simon/.config/awesome/themes/zenburn/theme.lua")
beautiful.init("/home/simon/.config/awesome/themes/ww/theme.lua")

-- This is used later as the default terminal and editor to run.
--terminal = "x-terminal-emulator"
terminal = "urxvt"
editor = "emacs -nw" or os.getenv("EDITOR") or "editor"
editor_cmd = terminal .. " -e " .. editor

-- Default modkey.
-- Usually, Mod4 is the key with a logo between Control and Alt.
-- If you do not like this or do not have such a key,
-- I suggest you to remap Mod4 to another key using xmodmap or other tools.
-- However, you can use another modifier like Mod1, but it may interact with others.
modkey = "Mod4"

-- Table of layouts to cover with awful.layout.inc, order matters.
layouts =
{
    awful.layout.suit.floating,
    awful.layout.suit.tile,
    awful.layout.suit.tile.left,
    awful.layout.suit.tile.bottom,
    awful.layout.suit.tile.top,
    awful.layout.suit.fair,
    awful.layout.suit.fair.horizontal,
    awful.layout.suit.spiral,
    awful.layout.suit.spiral.dwindle,
    awful.layout.suit.max,
    awful.layout.suit.max.fullscreen,
    awful.layout.suit.magnifier
}
-- }}}

-- {{{ Wallpaper
--if beautiful.wallpaper then
--    for s = 1, screen.count() do
--        gears.wallpaper.maximized(beautiful.wallpaper, s, true)
--    end
--end
awful.util.spawn_with_shell("feh --bg-fill --randomize /home/simon/Dropbox/comp/wallpapers/torment/*")
-- }}}


-- {{{ Tags
-- Define a tag table which hold all screen tags.
tags = {}
for s = 1, screen.count() do
    -- Each screen has its own tag table.
    tags[s] = awful.tag({ "Main", "Net", "Music", "Math", "Video", "Skype", 7, 8, "VPN" }, s, layouts[3])
end
-- }}}

-- {{{ Menu
-- Create a laucher widget and a main menu
myawesomemenu = {
   { "manual", terminal .. " -e man awesome" },
   { "edit config", editor_cmd .. " " .. awesome.conffile },
   { "restart", awesome.restart },
   { "quit", awesome.quit }
}

mymainmenu = awful.menu({ items = { { "awesome", myawesomemenu, beautiful.awesome_icon },
                                    { "Debian", debian.menu.Debian_menu.Debian },
                                    { "open terminal", terminal }
                                  }
                        })

mylauncher = awful.widget.launcher({ image = beautiful.awesome_icon,
                                     menu = mymainmenu })
-- }}}

-- {{{ Wibox
-- Create a textclock widget
mytextclock = awful.widget.textclock()
calendar = awful.tooltip({ objects = { mytextclock }, })

cal_pipe = io.popen("ncal -bM")
cal_text = cal_pipe:read("*all"):gsub("%p%c([%d%s])%p%c(%d)",
                                      '<span underline="single" background="#81654F">%1%2</span>') -- Erstat bold i terminalen med underline og baggrundsfarve
                                :gsub("[%c%s]+$", " ") -- Fjern alt overskydende whitespace og ekstra linier
                                :gsub("%s%s%c", " \n ") -- Lidt dumt, men outputtet er for langt på nogle linier og tomme strenge har en grim baggrundsfarve
cal_pipe:close()

calendar:set_markup('<tt><span background="#C1C48B"> ' -- Monospace og rigtig baggrundsfarve
                    .. cal_text
                    .. string.rep(" ", 58 + (select(2, cal_text:gsub('\n', '\n'))+1)*22 - cal_text:len() + 1) -- Længde (7*22) + <spans> og lign. (58, åbenbart). Dette går nok hurtigt i stykker igen
                    .. "</span></tt>")
                     

-- {{{ Volume widget
-- http://awesome.naquadah.org/wiki/Farhavens_volume_widget
tbvolume = wibox.widget.textbox() -- center

cardid = "0"
channel = "Master"
function updatevolume(widget)
	local fd = io.popen("amixer -c " .. cardid .. " -- sget " .. channel)
        local status = fd:read("*all")
        fd:close()

        local volume = string.match(status, "(%d?%d?%d)%%") or "0"
	volume = string.format("% 3d", volume)
	 
	status = string.match(status, "%[(o[^%]]*)%]") or "off"
	 
	if string.find(status, "on", 1, true) then
	   volume = "Vol:" .. volume .. "%"
	else
	   volume = "Vol:" .. volume .. "M"
	end
	widget:set_markup(volume)
end
updatevolume(tbvolume)

-- Gmail
-- gmail widget and tooltip
mygmail = wibox.widget.textbox() -- right

mygmailimg = wibox.widget.imagebox()
mygmailimg:set_image("/home/simon/.config/awesome/icons/mail.png")

gmail_t = awful.tooltip({ objects = { mygmail, mygmailimg }, })

spotifytitle = awful.tooltip({ objects = { tbvolume }, })

last_mail = ""

vicious.register(mygmail, vicious.widgets.gmail,
                function (widget, args)
                    gmail_t:set_text(args["{subject}"])
		    if tonumber(args["{count}"]) > 0 and last_mail ~= args["{subject}"] then
		        last_mail = args["{subject}"]
		        naughty.notify({text = args["{subject}"], icon = "/home/simon/.config/awesome/icons/mail.png", icon_size = 16, run = function () awful.util.spawn_with_shell("firefox gmail.com") end})
		    end
                    return ": " .. args["{count}"]
                 end, 127) 
                 --the '127' here means check every 127 seconds.

-- Clicking gmail-things starts gmail
mygmail:buttons(awful.util.table.join(
	awful.button({ }, 1, 
		function () 
			 awful.util.spawn_with_shell("firefox gmail.com")
		end)))
mygmailimg:buttons(awful.util.table.join(
	awful.button({ }, 1, 
		function () 
			 awful.util.spawn_with_shell("firefox gmail.com")
		end)))

-- CPU widget
-- Initialize widget
cpuwidget = wibox.widget.textbox()
-- Register widget
vicious.register(cpuwidget, vicious.widgets.cpu, "CPU: $1%")

cpuwidget:buttons(awful.util.table.join(
	awful.button({ }, 1,
		function ()
			 awful.util.spawn(terminal .. " -e top")
		end)))

divider = wibox.widget.textbox() -- center
divider:set_text(" | ")

bat = wibox.widget.textbox() -- center
bat_t = awful.tooltip({ objects = { bat }, })
vicious.register(bat, vicious.widgets.bat, 
	function (widgets, args)
		 local f = io.popen("acpi -V | head -1 | cut -d ' ' -f 5")
		 local l = "Error"
		 local colour = "black"
		 if f ~= nil then
		     l = f:read()
		 end
		 f:close()
		 for h,m in string.gmatch(l,"(%d+):(%d+)") do
		     -- If discharging battery and time is less than 20 minutes or 10% battery remaining, text is red
		     if args[1] == "-" and (tonumber(h) == 0 and tonumber(m) < 20 or args[2] < 10) then
		     	colour = "red"
		     end
		 end
		 bat_t:set_text( (args[1] == "-" and "Time left: " or ("Charging done in: ")) .. l)
		 return string.format("Bat: <span fgcolor='%s'>%2d%s</span>", colour, args[2], args[1] == "-" and "%" or "+")
	end, 61, "BAT0")

-- bat_t:set_text("Updating...")

-- RAM usage widget
memwidget = wibox.widget.textbox()
vicious.cache(vicious.widgets.mem)
vicious.register(memwidget, vicious.widgets.mem, "RAM: $2/$3", 71)
                 --update every 71 seconds

-- Create a wibox for each screen and add it
mywibox = {}
mypromptbox = {}
mylayoutbox = {}
mytaglist = {}
mytaglist.buttons = awful.util.table.join(
                    awful.button({ }, 1, awful.tag.viewonly),
                    awful.button({ modkey }, 1, awful.client.movetotag),
                    awful.button({ }, 3, awful.tag.viewtoggle),
                    awful.button({ modkey }, 3, awful.client.toggletag),
                    awful.button({ }, 4, awful.tag.viewnext),
                    awful.button({ }, 5, awful.tag.viewprev)
                    )
mytasklist = {}
mytasklist.buttons = awful.util.table.join(
                     awful.button({ }, 1, function (c)
                                              if c == client.focus then
                                                  c.minimized = true
                                              else
                                                  if not c:isvisible() then
                                                      awful.tag.viewonly(c:tags()[1])
                                                  end
                                                  -- This will also un-minimize
                                                  -- the client, if needed
                                                  client.focus = c
                                                  c:raise()
                                              end
                                          end),
                     awful.button({ }, 3, function ()
                                              if instance then
                                                  instance:hide()
                                                  instance = nil
                                              else
                                                  instance = awful.menu.clients({ width=250 })
                                              end
                                          end),
                     awful.button({ }, 4, function ()
                                              awful.client.focus.byidx(1)
                                              if client.focus then client.focus:raise() end
                                          end),
                     awful.button({ }, 5, function ()
                                              awful.client.focus.byidx(-1)
                                              if client.focus then client.focus:raise() end
                                          end))

for s = 1, screen.count() do
    -- Create a promptbox for each screen
    mypromptbox[s] = awful.widget.prompt()
    -- Create an imagebox widget which will contains an icon indicating which layout we're using.
    -- We need one layoutbox per screen.
    mylayoutbox[s] = awful.widget.layoutbox(s)
    mylayoutbox[s]:buttons(awful.util.table.join(
                           awful.button({ }, 1, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 3, function () awful.layout.inc(layouts, -1) end),
                           awful.button({ }, 4, function () awful.layout.inc(layouts, 1) end),
                           awful.button({ }, 5, function () awful.layout.inc(layouts, -1) end)))
    -- Create a taglist widget
    mytaglist[s] = awful.widget.taglist(s, awful.widget.taglist.filter.all, mytaglist.buttons)

    -- Create a tasklist widget
    mytasklist[s] = awful.widget.tasklist(s, awful.widget.tasklist.filter.currenttags, mytasklist.buttons)

    -- Create the wibox

    mywibox[s] = awful.wibox({ position = "top", screen = s })
    -- Add widgets to the wibox - order matters
    local left_layout = wibox.layout.fixed.horizontal()
    left_layout:add(mylauncher)
    left_layout:add(mytaglist[s])
    left_layout:add(mypromptbox[s])


    -- Widgets that are aligned to the right
    local right_layout = wibox.layout.fixed.horizontal()

    if s == 1 then
       right_layout:add(wibox.widget.systray())    
       right_layout:add(divider)
       right_layout:add(tbvolume)
       right_layout:add(divider)
       right_layout:add(mygmailimg)
       right_layout:add(mygmail)     
       right_layout:add(divider)
       right_layout:add(bat)
       right_layout:add(divider)    
       right_layout:add(cpuwidget)    
       right_layout:add(divider)
       right_layout:add(memwidget)
       right_layout:add(divider)
    end
    right_layout:add(mytextclock)
    right_layout:add(mylayoutbox[s])

    -- Now bring it all together (with the tasklist in the middle)
    local layout = wibox.layout.align.horizontal()
    layout:set_left(left_layout)
    layout:set_middle(mytasklist[s])
    layout:set_right(right_layout)

    mywibox[s]:set_widget(layout)
end
--    mywibox[s].widgets = {
--        {
--            mylauncher,
--            mytaglist[s],
--            mypromptbox[s],
--            layout = awful.widget.layout.horizontal.leftright
--        },
--        mylayoutbox[s],
--        mytextclock,
--	divider,
--	s == 1 and memwidget or nil,
--	s == 1 and divider or nil,
--	s == 1 and cpuwidget or nil,
  --      s == 1 and divider or nil,
--	s == 1 and bat or nil,
--	s == 1 and divider or nil,
--	s == 1 and mygmail or nil,
--	s == 1 and mygmailimg or nil,
  --      s == 1 and divider or nil,
--	s == 1 and tbvolume or nil,
  --      s == 1 and divider or nil,
--	s == 1 and mysystray or nil,
  --      s == 1 and divider or nil,
    --    mytasklist[s],
      --  layout = awful.widget.layout.horizontal.rightleft
--    }
--end
-- }}}

-- {{{ Mouse bindings
root.buttons(awful.util.table.join(
    awful.button({ }, 3, function () mymainmenu:toggle() end),
    awful.button({ }, 4, awful.tag.viewnext),
    awful.button({ }, 5, awful.tag.viewprev)
))
-- }}}

-- {{{ Key bindings
globalkeys = awful.util.table.join(
    awful.key({ modkey,           }, "Left",   awful.tag.viewprev       ),
    awful.key({ modkey,           }, "Right",  awful.tag.viewnext       ),
    awful.key({ modkey,           }, "Escape", awful.tag.history.restore),

    awful.key({ modkey,           }, "j",
        function ()
            awful.client.focus.byidx( 1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "k",
        function ()
            awful.client.focus.byidx(-1)
            if client.focus then client.focus:raise() end
        end),
    awful.key({ modkey,           }, "w", function () mymainmenu:show({keygrabber=true}) end),

    -- Layout manipulation
    awful.key({ modkey, "Shift"   }, "j", function () awful.client.swap.byidx(  1)    end),
    awful.key({ modkey, "Shift"   }, "k", function () awful.client.swap.byidx( -1)    end),
    awful.key({ modkey, "Control" }, "j", function () awful.screen.focus_relative( 1) end),
    awful.key({ modkey, "Control" }, "k", function () awful.screen.focus_relative(-1) end),
    awful.key({ modkey,           }, "u", awful.client.urgent.jumpto),
    awful.key({ modkey,           }, "Tab",
        function ()
            awful.client.focus.history.previous()
            if client.focus then
                client.focus:raise()
            end
        end),

    -- Standard program
    awful.key({ modkey,           }, "Return", function () awful.util.spawn(terminal) end),
    awful.key({ modkey, "Control" }, "r", awesome.restart),
    awful.key({ modkey, "Shift"   }, "q", awesome.quit),

    awful.key({ modkey,           }, "l",     function () awful.tag.incmwfact( 0.05)    end),
    awful.key({ modkey,           }, "h",     function () awful.tag.incmwfact(-0.05)    end),
    awful.key({ modkey, "Shift"   }, "h",     function () awful.tag.incnmaster( 1)      end),
    awful.key({ modkey, "Shift"   }, "l",     function () awful.tag.incnmaster(-1)      end),
    awful.key({ modkey, "Control" }, "h",     function () awful.tag.incncol( 1)         end),
    awful.key({ modkey, "Control" }, "l",     function () awful.tag.incncol(-1)         end),
    awful.key({ modkey,           }, "space", function () awful.layout.inc(layouts,  1) end),
    awful.key({ modkey, "Shift"   }, "space", function () awful.layout.inc(layouts, -1) end),

    awful.key({ modkey, "Control" }, "n", awful.client.restore),

    -- Prompt
    awful.key({ modkey },            "r",     function () mypromptbox[mouse.screen]:run() end),

    awful.key({ modkey }, "x",
              function ()
                  awful.prompt.run({ prompt = "Run Lua code: " },
                  mypromptbox[mouse.screen].widget,
                  awful.util.eval, nil,
                  awful.util.getdir("cache") .. "/history_eval")
              end)
)

clientkeys = awful.util.table.join(
    awful.key({ modkey,           }, "f",      function (c) c.fullscreen = not c.fullscreen  end),
    awful.key({ modkey, "Shift"   }, "c",      function (c) c:kill()                         end),
    awful.key({ modkey, "Control" }, "space",  awful.client.floating.toggle                     ),
    awful.key({ modkey, "Control" }, "Return", function (c) c:swap(awful.client.getmaster()) end),
    awful.key({ modkey,           }, "o",      awful.client.movetoscreen                        ),
    awful.key({ modkey, "Shift"   }, "r",      function (c) c:redraw()                       end),
    awful.key({ modkey,           }, "t",      function (c) c.ontop = not c.ontop            end),
    awful.key({ modkey,           }, "n",
        function (c)
            -- The client currently has the input focus, so it cannot be
            -- minimized, since minimized clients can't have the focus.
            c.minimized = true
        end),
    awful.key({ modkey,           }, "m",
        function (c)
            c.maximized_horizontal = not c.maximized_horizontal
            c.maximized_vertical   = not c.maximized_vertical
        end),
    awful.key({ }, "XF86AudioLowerVolume",
    	function () 
		 awful.util.spawn_with_shell("amixer -q sset Master 5%-")
		 -- updatevolume(tbvolume) -- The previous command takes too long to complete, so this is usually not relevant
	end),
    awful.key({ }, "XF86AudioRaiseVolume",
    	function () 
		 awful.util.spawn_with_shell("amixer -q sset Master 5%+") 
		 -- updatevolume(tbvolume) -- See above
	end),
    awful.key({ }, "XF86AudioMute",
    	function () 
		 awful.util.spawn_with_shell("amixer -D pulse set Master toggle")
		 -- updatevolume(tbvolume) -- See above
	end),
    awful.key({ modkey, }, ".",
        function ()
                 awful.util.spawn_with_shell("dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.PlayPause")
                 -- "xdotool key --window (xdotool search --name 'Spotify' | head -n1) 'XF86AudioPlay'")
        end),
    awful.key({ modkey, }, ",",
        function ()
                 awful.util.spawn_with_shell("dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Previous")
--                 awful.util.spawn_with_shell("xdotool key --window (xdotool search --name 'Spotify' | head -n1) 'XF86AudioPrev'")  
	end),
    awful.key({ modkey, }, "-",
        function ()
                 awful.util.spawn_with_shell("dbus-send --print-reply --dest=org.mpris.MediaPlayer2.spotify /org/mpris/MediaPlayer2 org.mpris.MediaPlayer2.Player.Next")
--                 awful.util.spawn_with_shell("xdotool key --window (xdotool search --name 'Spotify' | head -n1) 'XF86AudioNext'")
	end)
)

-- Compute the maximum number of digit we need, limited to 9
keynumber = 0
for s = 1, screen.count() do
   keynumber = math.min(9, math.max(#tags[s], keynumber));
end

-- Bind all key numbers to tags.
-- Be careful: we use keycodes to make it works on any keyboard layout.
-- This should map on the top row of your keyboard, usually 1 to 9.
for i = 1, keynumber do
    globalkeys = awful.util.table.join(globalkeys,
        awful.key({ modkey }, "#" .. i + 9,
                  function ()
                        local screen = mouse.screen
                        if tags[screen][i] then
                            awful.tag.viewonly(tags[screen][i])
                        end
                  end),
        awful.key({ modkey, "Control" }, "#" .. i + 9,
                  function ()
                      local screen = mouse.screen
                      if tags[screen][i] then
                          awful.tag.viewtoggle(tags[screen][i])
                      end
                  end),
        awful.key({ modkey, "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.movetotag(tags[client.focus.screen][i])
                      end
                  end),
        awful.key({ modkey, "Control", "Shift" }, "#" .. i + 9,
                  function ()
                      if client.focus and tags[client.focus.screen][i] then
                          awful.client.toggletag(tags[client.focus.screen][i])
                      end
                  end))
end

clientbuttons = awful.util.table.join(
    awful.button({ }, 1, function (c) client.focus = c; c:raise() end),
    awful.button({ modkey }, 1, awful.mouse.client.move),
    awful.button({ modkey }, 3, awful.mouse.client.resize))

-- Set keys
root.keys(globalkeys)
-- }}}

-- {{{ Rules
awful.rules.rules = {
    -- All clients will match this rule.
    { rule = { },
      properties = { border_width = beautiful.border_width,
                     border_color = beautiful.border_normal,
                     focus = true,
                     keys = clientkeys,
                     buttons = clientbuttons,
                     size_hints_honor = false } },
    { rule = { class = "MPlayer" },
      properties = { floating = true } },
    { rule = { class = "mpv" },
      properties = { floating = true,
                     fullscreen = true,
                     tag = tags[1][6] } },
    { rule = { class = "pinentry" },
      properties = { floating = true } },
    { rule = { class = "Gimp" },
      properties = { floating = true } },
    { rule = { class = "Firefox" },
      properties = { floating = true,
      		     tag = tags[1][2] } },
    { rule = { class = "Code" },
      properties = { floating = true } },
    { rule = { class = "Skype" },
      properties = { floating = true,
      		     tag = tags[1][6] } },
    { rule = { class = "Totem" },
      properties = { floating = true,
      		     tag = tags[1][5] } },
    { rule = { class = "Conkeror" },
      properties = { floating = true,
      		     tag = tags[1][2] } },
    { rule = { class = "Dwarf_Fortress" },
      properties = { floating = true } },
    { rule = { class = "Spotify" },
      properties = { floating = true,
      		     tag = tags[1][3] } },
--    { rule = { name = "Unknown" }, -- Spotify is stupid.
--      properties = { floating = true,
--     		     tag = tags[1][3] } },
    { rule = { instance = "xfi" }, --- xfimage
      	       		  	   --- class = "Xfe" also matches xfe
      properties = { floating = true,
      		     fullscreen = true } },
    { rule = { class = "Mathematica" },
      properties = { floating = true,
      		     tag = tags[1][4],
		     fullscreen = true } }
    
    -- Set Firefox to always map on tags number 2 of screen 1.
    -- { rule = { class = "Firefox" },
    --   properties = { tag = tags[1][2] } },
}
-- }}}

-- {{{ Signals
-- Signal function to execute when a new client appears.
client.connect_signal("manage", function (c, startup)
    -- Add a titlebar
    -- awful.titlebar.add(c, { modkey = modkey })

    -- Enable sloppy focus -- Disabled 11/01/17
--    c:connect_signal("mouse::enter", function(c)
--        if awful.layout.get(c.screen) ~= awful.layout.suit.magnifier
--            and awful.client.focus.filter(c) then
--            client.focus = c
--        end
--    end)

    if not startup then
        -- Set the windows at the slave,
        -- i.e. put it at the end of others instead of setting it master.
        -- awful.client.setslave(c)

        -- Put windows in a smart way, only if they does not set an initial position.
        if not c.size_hints.user_position and not c.size_hints.program_position then
            awful.placement.no_overlap(c)
            awful.placement.no_offscreen(c)
        end
    end
end)

client.connect_signal("focus", function(c) c.border_color = beautiful.border_focus end)
client.connect_signal("unfocus", function(c) c.border_color = beautiful.border_normal end)
-- }}}

volumetimer = timer({timeout = 13})
volumetimer:connect_signal("timeout", function () updatevolume(tbvolume) end)
volumetimer:start()

awful.util.spawn_with_shell("xfce4-power-manager --no-daemon")

awful.util.spawn_with_shell("pgrep nm-applet >/dev/null; or nm-applet &")

awful.util.spawn_with_shell("dropbox start")

--awful.util.spawn_with_shell("nmcli c up id eduroam")

old_l = ''
spotimer = timer ({ timeout = 11 })
spotimer:connect_signal("timeout", function()
	local f = io.popen("/home/simon/getify")
        local l = f:read()
	f:close()
        if l == nil then
                l = ''
        end
	l = l:gsub("&", "&amp;")
        spotifytitle:set_text(l)
	if l ~= old_l and l ~= '' then
	     	old_l = l
	     	naughty.notify({text = l, icon = "/home/simon/Documents/icons/Spotify-icon-32.png", icon_size = 16})
	end
	
end)
spotimer:start()
